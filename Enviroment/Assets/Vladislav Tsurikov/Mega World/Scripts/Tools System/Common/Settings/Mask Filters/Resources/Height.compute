Texture2D<float> In_HeightTex;
Texture2D<float> In_BaseMaskTex;
RWTexture2D<float> OutputTex;

float4 HeightRange;

int _BlendMode;

float _MinHeight;
float _MaxHeight;
int _HeightFalloffType;
float _MinAddHeightFalloff;
float _MaxAddHeightFalloff;

float _ClampMinHeight;
float _ClampMaxHeight;

float Lerp(float v0, float v1, float t) 
{
    return (1 - t) * v0 + t * v1;
}

float InverseLerp(float a, float b, float t)
{
    return (t - a) / (b - a);
}

float GetSharpenHeight(float height, float minHeight, float maxHeight)
{
    if (height >= minHeight && height <= maxHeight)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

float GetFalloffAddHeight(float height, float minHeight, float maxHeight, float localMinAddHeightFalloff, float localMaxAddHeightFalloff)
{
    if(height > maxHeight)
    {
        float newMaxHeight = maxHeight + localMaxAddHeightFalloff;

        return InverseLerp(newMaxHeight, maxHeight, height);
    }
    else if(height < minHeight)
    {
        float newMinHeight = minHeight - localMinAddHeightFalloff;

        return InverseLerp(newMinHeight, minHeight, height);
    }
    else
    {
        return 1;
    }
}

float GetHeightScale(float height)
{
	return saturate((height - HeightRange.x) / (HeightRange.y - HeightRange.x));
}

#pragma kernel Height
[numthreads(1, 1, 1)]
void Height(uint3 id : SV_DispatchThreadID)
{
	float height = GetHeightScale(In_HeightTex[id.xy]) * 2;

    height = Lerp(_ClampMinHeight, _ClampMaxHeight, height);

    float blendHeightValue = 1;
    float result = 1;

	switch (_HeightFalloffType)
    {
        case 1: //FalloffAdd
        {
			blendHeightValue = GetFalloffAddHeight(height, _MinHeight, _MaxHeight, _MinAddHeightFalloff, _MaxAddHeightFalloff);

			break;
        }
        default:
        {
			blendHeightValue = GetSharpenHeight(height, _MinHeight, _MaxHeight);

			break;
        }
    }

    blendHeightValue = clamp(blendHeightValue, 0, 1);

    switch (_BlendMode)
    {
        case 0: //Multiply
        {
            result = In_BaseMaskTex[id.xy] * blendHeightValue;

			break;
        }
        case 1: //Add
        {
			result = In_BaseMaskTex[id.xy] + blendHeightValue;

			break;
        }
        case 2: //Subtract
        {
			result = In_BaseMaskTex[id.xy] - blendHeightValue;

			break;
        }
    }

    OutputTex[id.xy] = clamp(result, 0, 1);
}